{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A Robot Framework Listener for library agnostic self-healing and smart recovery of tests</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install robotframework-heal\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Add <code>Library    SelfHealing</code> to your Robot Framework test suite <code>*** Settings ***</code> section.</p> <pre><code>*** Settings ***\nLibrary    SelfHealing\n</code></pre> <p>Set up the following environment variables to enable the self-healing feature:</p> <ul> <li><code>LLM_API_KEY</code></li> <li><code>LLM_API_BASE</code></li> <li><code>LLM_TEXT_MODEL</code> (model used for picking final locator from proposal list)</li> <li><code>LLM_LOCATOR_MODEL</code> (model for generating locator proposals from DOM tree)</li> <li><code>LLM_VISION_MODEL</code> (not working yet)</li> </ul> <p>Interface with LLMs uses the LiteLMM API. Check the list of available Providers and how to connect to them.</p> <pre><code>*** Settings ***\nLibrary    Browser    timeout=5s\nLibrary    SelfHealing    use_llm_for_locator_proposals=True\nSuite Setup    New Browser    browser=${BROWSER}    headless=${HEADLESS}\nTest Setup    New Context    viewport={'width': 1280, 'height': 720}\nTest Teardown    Close Context\nSuite Teardown    Close Browser    ALL\n\n*** Variables ***\n${BROWSER}    chromium\n${HEADLESS}    True\n\n*** Test Cases ***\nLogin with valid credentials\n    New Page    https://the-internet.herokuapp.com/login\n    Fill Text    id=user    tomsmith\n    Fill Text    id=pass    SuperSecretPassword!\n    Click    id=loginbutton\n    Get Text    id=flash    *=    You logged into a secure area!\n</code></pre>"},{"location":"#arguments","title":"Arguments","text":"<ul> <li><code>fix</code>: Specifies the mode of operation, set to \"realtime\" for real-time healing. Default is \"realtime\".</li> <li><code>collect_locator_info</code>: Boolean flag to enable or disable the collection of locator information. Default is false.</li> <li><code>use_locator_db</code>: Boolean flag to enable or disable the use of a locator database. Default is false.</li> <li><code>use_llm_for_locator_proposals</code>: Boolean flag to enable or disable the use of a language model for generating locator proposals. If true, locator proposals will be identified from DOM Tree via LLM. If set to false, locator proposals are generated via CSS/XPATH generator. Default is false.</li> <li><code>heal_assertions</code>: Boolean flag to enable or disable the healing of assertions. Default is false. (not implemented yet)</li> <li><code>locator_db_file</code>: Specifies the filename for the locator database. Default is \"locator_db.json\".</li> </ul>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>Example when running with Ollama LLM:</p> <pre><code>LLM_API_BASE=http://localhost:11434\nLLM_TEXT_MODEL=ollama_chat/llama3.1\nLLM_LOCATOR_MODEL=ollama_chat/llama3.1\nLLM_VISION_MODEL=ollama_chat/llama3.2-vision\n</code></pre> <p>Example when using OpenAI:</p> <pre><code>LLM_API_KEY=YOUR_OPENAI_API_KEY\nLLM_TEXT_MODEL=gpt-3.5-turbo\nLLM_LOCATOR_MODEL=gpt-3.5-turbo\n</code></pre>"},{"location":"features/","title":"Features","text":""},{"location":"features/#cssxpath-generator","title":"CSS/XPATH Generator","text":"<p>Enable via <code>use_llm_for_locator_proposals</code>=<code>false</code></p> <p>An internal CSS/XPATH generator will generate a list of unique locator proposals for all relevant elements of a DOM Tree. Relevant elements are decided based on the used Keyword. For example, for a keyword <code>Fill Text</code>, the  <code>input</code> and <code>textarea</code> elements are more relevant. For a keyword <code>Click</code>, the <code>button</code> , <code>a</code> and other <code>clickable</code> elements are more relevant.</p> <p>The generated locators are unique and based on attributes like <code>class</code>, <code>id</code>, <code>placeholder</code> , <code>type</code> and <code>name</code>. Also <code>text</code> values and next/previous <code>siblings</code> as well as <code>parent</code> elements are used to support the unique identification.</p>"},{"location":"features/#ai-supported-self-healing","title":"AI Supported Self-Healing","text":"<p>Enable via <code>use_llm_for_locator_proposals</code>=<code>true</code></p> <p>DOM Tree will be sent to a LLM, which will identify a list of locator proposals based on the failed locator. Locators will depend on the type of LLM.</p> <p>LLMs can be selected via environment variables:  </p> <ul> <li><code>LLM_TEXT_MODEL</code> (model used for picking final locator from proposal list)</li> <li><code>LLM_LOCATOR_MODEL</code> (model for generating locator proposals from DOM tree)</li> </ul>"},{"location":"features/#collect-additional-information-for-locator-proposals","title":"Collect additional information for locator proposals","text":""},{"location":"features/#locator-database","title":"Locator Database","text":"<p>Enable via  </p> <ul> <li><code>collect_locator_info</code>: Boolean flag to enable or disable the collection of locator information. Default is false.</li> <li><code>use_locator_db</code>: Boolean flag to enable or disable the use of a locator database for selection of fixed locator. Default is false.</li> <li><code>locator_db_file</code>: Specifies the filename for the locator database. Default is \"locator_db.json\".</li> </ul> <p>During a successful test run, additional details for each working locator can be collected and stored into a TinyDB database by setting <code>collect_locator_info</code> to <code>true</code>.</p> <p>The locator database is just a <code>.json</code> file and the location and name can be set via <code>locator_db_file</code>.</p> <p>During a test run in which locators shall be healed, the previously collected details in the TinyDB can be used to make better decision for the healed locator. That behavior can be enabled by setting <code>use_locator_db</code> to <code>True</code>.</p>"},{"location":"features/#shadow-dom","title":"Shadow DOM","text":""},{"location":"features/#dom-tree-reduction","title":"DOM Tree reduction","text":"<ul> <li><code>fix</code>: Specifies the mode of operation, set to \"realtime\" for real-time healing. Default is \"realtime\".</li> <li><code>collect_locator_info</code>: Boolean flag to enable or disable the collection of locator information. Default is false.</li> <li><code>use_locator_db</code>: Boolean flag to enable or disable the use of a locator database. Default is false.</li> <li><code>use_llm_for_locator_proposals</code>: Boolean flag to enable or disable the use of a language model for generating locator proposals. If true, locator proposals will be identified from DOM Tree via LLM. If set to false, locator proposals are generated via CSS/XPATH generator. Default is false.</li> <li><code>heal_assertions</code>: Boolean flag to enable or disable the healing of assertions. Default is false. (not implemented yet)</li> <li><code>locator_db_file</code>: Specifies the filename for the locator database. Default is \"locator_db.json\".</li> </ul>"},{"location":"features/#process","title":"Process","text":"<pre><code>graph TD\n  A[end_library_keyword] --&gt; B{Status?};\n  B --&gt;|FAIL| C{Broken Locator?};\n  C --&gt; |YES| D[Get Fixed Locator];\n  D --&gt; F{Get Locator proposals via}\n  F --&gt; |LLM| G[Use LLM for Locator Proposals];\n  F --&gt; |CSS/XPATH| H[Use CSS/XPATH Generator];\n  G --&gt; J[Add Details to Locator Proposals];\n  H --&gt; J[Add Details to Locator Proposals];\n  B -----&gt;|PASS| E[Continue with Execution];\n  J --&gt; K{Fixed Locator Found?};\n  K --&gt;|YES| E;\n  K --&gt;|NO| I;\n  C -------&gt; |NO| I[FAIL];\n</code></pre>"}]}